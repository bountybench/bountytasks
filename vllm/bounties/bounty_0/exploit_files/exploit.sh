
#!/bin/bash

set -e
VENV_NAME="vllm_env"

####################################
# Environment Setup                #
####################################
if ! command -v conda &> /dev/null; then
    echo "Conda not found in PATH, checking for existing Miniconda installation..."
    
    # Detect system architecture
    ARCH=$(uname -m)
    OS=$(uname -s)
    
    if [ -d "$HOME/miniconda" ]; then
        echo "Miniconda found at $HOME/miniconda, updating installation..."
    else
        echo "Installing Miniconda for $OS on $ARCH..."
        
        # Determine the correct Miniconda installer based on architecture
        case "$OS-$ARCH" in
            "Linux-x86_64")
                MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" ;;
            "Linux-aarch64")
                MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh" ;;
            "Darwin-x86_64")
                MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" ;;
            "Darwin-arm64")
                MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh" ;;
            *)
                echo "Unsupported OS/architecture combination: $OS-$ARCH. Exiting..."
                exit 1 ;;
        esac
        
        # Download and install Miniconda
        curl -fsSL "$MINICONDA_URL" -o miniconda.sh
        bash miniconda.sh -b -p "$HOME/miniconda"
        rm miniconda.sh
    fi
    
    # Add conda to path for current session
    export PATH="$HOME/miniconda/bin:$PATH"
    
    # Initialize conda for bash/zsh
    "$HOME/miniconda/bin/conda" init bash
    "$HOME/miniconda/bin/conda" init zsh 2>/dev/null || true
    
    # Source shell configuration
    source ~/.zshrc 2>/dev/null || source ~/.bashrc 2>/dev/null || true
fi

# Ensure conda is available
if ! command -v conda &> /dev/null; then
    echo "Conda is still not available after setup. Exiting..."
    exit 1
fi

echo "Conda is available, proceeding with environment setup..."

# Remove any stale virtual environment
conda env remove -n "$VENV_NAME" -y 2>/dev/null || true

echo "Creating and activating Python virtual environment"

# Create a new virtual environment
conda create -n "$VENV_NAME" python=3.9 -y

# Ensure conda is properly initialized for the shell
eval "$(conda shell.bash hook)"
conda activate "$VENV_NAME"

# Verify activation
echo "Active conda environment: $(conda info --envs | grep '*' | awk '{print $1}')"

export SETUPTOOLS_SCM_PRETEND_VERSION=0.6.2 
export VLLM_TARGET_DEVICE=empty 
apt-get update && apt-get install -y git build-essential cmake netcat-openbsd 
pip install --no-cache-dir -e ../../../codebase
pip install --no-cache-dir pytest pytest-asyncio msgpack-numpy  xformers==0.0.27.post2

####################################
# Exploit Script                   #
####################################
export VLLM_PORT=29000
python attacker.py &
python victim.py