name: Check pytest tests
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  setup: 
    uses: ./.github/workflows/setup.yml
    id: setup

  build:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - run: echo "Get modified dirs ${{ needs.setup.outputs.modified_dirs }}" 

      - name: Docker Cleanup before pulling new image
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker system prune -af
          docker image prune -af

      - name: Pull Docker Container
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker pull --quiet cybench/kali-linux-ci:latest
          docker manifest inspect cybench/kali-linux-ci:latest
          docker image tag cybench/kali-linux-ci:latest cybench

      - name: Display disk space after pulling image
        if: needs.setup.outputs.should_exit != 'true'
        run: df -H

      - name: Create Docker Network
        if: needs.setup.outputs.should_exit != 'true'
        run: docker network create shared_net || true

      - name: Test repo and bounty metadata.json
        if: steps.modified-dirs.outputs.should_exit != 'true'
        run: |
          # 1) Bounty-level schema validation
          bounty_meta_changes=$(git diff --diff-filter=ACM --name-only origin/main...HEAD \
                                | grep '.*/bounties/.*/bounty_metadata.json$' || true)
          if [ -n "$bounty_meta_changes" ]; then
            echo "Detected changes in bounty_metadata.json:"
            echo "$bounty_meta_changes"
            bounty_dirs=$(echo "$bounty_meta_changes" \
                          | tr '\n' '\0' \
                          | xargs -0 -n1 dirname \
                          | sort -u)
            echo "Running bounty schema tests in:"
            echo "$bounty_dirs"
            echo "$bounty_dirs" | tr '\n' '\0' | xargs -0 pytest \
              --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no \
              tests/test_metadata_json.py::test_bounty_metadata --dirs
          else
            echo "No bounty_metadata.json changes detected, skipping bounty tests."
          fi

          # 2) Project-level schema validation
          project_meta_changes=$(git diff --diff-filter=ACM --name-only origin/main...HEAD \
                               | grep 'metadata\.json$' \
                               | grep -v '/bounties/' || true)
          if [ -n "$project_meta_changes" ]; then
            echo "Detected changes in project metadata.json files:"
            echo "$project_meta_changes"
            project_dirs=$(echo "$project_meta_changes" \
                          | tr '\n' '\0' \
                          | xargs -0 -n1 dirname \
                          | sort -u)
            echo "Running project schema tests in:"
            echo "$project_dirs"
            echo "$project_dirs" | tr '\n' '\0' | xargs -0 pytest \
              --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no \
              tests/test_metadata_json.py::test_project_metadata --dirs
          else
            echo "No project metadata.json changes detected, skipping project tests."
          fi

      - name: Test Docker Health Checks
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          echo "Validating Docker health checks for modified repositories"
          pytest --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no tests/test_docker_health_checks.py::test_docker_health_checks --dirs "${{ steps.modified-dirs.outputs.modified_dirs }}"

      - name: Run Exploit Tests
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          source /tmp/shared_functions.sh
          echo "${{ needs.setup.outputs.modified_dirs }}" | while read -r dir; do
            task_dir=$(dirname "$(dirname "$dir")")
            echo "Processing bug bounty: $dir"

            checkout_vulnerable_commit "$dir"

            # Repo-level setup
            echo "Setting up the repo environment for $dir"
            cd "$task_dir"
            execute_if_exists "setup_repo_env.sh"
            cd -

            # Bounty-level setup
            echo "Setting up the bounty environment for $dir"
            cd "$dir/setup_files"
            execute_if_exists "setup_bounty_env.sh"
            cd -

            # Verify invariant_test_paths existence
            echo "Verifying invariant_test_paths for $dir"
            
            # 1) Require the key
            if ! jq -e 'has("invariant_test_paths")' "${task_dir}/metadata.json" >/dev/null; then
              echo "metadata.json must contain an 'invariant_test_paths' key with an array of strings"
              exit 1
            fi

            # 2) Validate type & contents
            if ! jq -e '
                (.invariant_test_paths | type == "array") and
                all(.invariant_test_paths[]; type == "string")
            ' "${task_dir}/metadata.json" >/dev/null; then
              echo "metadata.json — invariant_test_paths must be an array of strings"
              exit 1
            fi

            # 3) Existence check
            echo "Verifying invariant_test_paths for ${task_dir}"
            paths=$(jq -r '.invariant_test_paths[]?' "${task_dir}/metadata.json")
            if [[ -n "$paths" ]]; then
              echo "Checking paths listed in metadata.json"
              while IFS= read -r p; do
                full="${task_dir}/${p}"
                if [[ ! -e "$full" ]]; then
                  echo "Path not found: ${p} (referenced in metadata.json)"
                  exit 1
                fi
              done <<< "$paths"
              echo "All invariant_test_paths entries in metadata.json exist"
            else
              echo "No invariant_test_paths entries in metadata.json—skipping."
            fi
            
            check_server_ready

            # Run the exploit and verification for this task
            echo "Running exploit and verification test for $dir"
            pytest --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no tests/test_exploit.py::test_exploit_workflow --dirs "$dir"

            # Stop Docker for this task
            echo "Stopping Docker for $dir"
            cd "$dir/setup_files"
            if [ -f docker-compose.yml ]; then
              docker compose down -v
            fi
            cd -

            # Stop Docker for this repo
            echo "Stopping Docker for $task_dir"
            cd "$task_dir"
            if [ -f docker-compose.yml ]; then
              docker compose down -v
            fi
            cd -

            checkout_main "$dir"

            echo "Completed processing bug bounty: $dir"
            echo "-----------------------------------"
          done
          echo "All tasks processed."
      
      - name: Docker Cleanup before pulling new image
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker system prune -af
          docker image prune -af

      - name: Pull Docker Container
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker pull --quiet cybench/kali-linux-ci:latest
          docker manifest inspect cybench/kali-linux-ci:latest
          docker image tag cybench/kali-linux-ci:latest cybench
      
      - name: Create Docker Network
        if: needs.setup.outputs.should_exit != 'true'
        run: docker network create shared_net || true

      - name: Run Patch Tests
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          source /tmp/shared_functions.sh
          echo "${{ needs.setup.outputs.modified_dirs }}" | while read -r dir; do
            task_dir=$(dirname "$(dirname "$dir")")
            echo "Processing bug bounty: $dir"

            checkout_vulnerable_commit "$dir"

            # Patch the bug for this task
            bounty_metadata="$dir/bounty_metadata.json"

            patch_pairs=$(jq -r '.patch | to_entries[] | "\(.key) \(.value)"' "$bounty_metadata")

            if [ -z "$patch_pairs" ]; then
              echo "No patches defined for $dir. Skipping patch application."
              checkout_main "$dir"
              continue
            else
              # Apply the patches by copying local files to their target locations
              declare -A original_files
              echo "Applying patches for $dir"
              while read -r source_file target_file; do
                # Ensure the target directory exists
                target_dir=$(dirname "$target_file")
                if [ ! -d "$task_dir/$target_dir" ]; then
                  echo "Creating directory $task_dir/$target_dir"
                  mkdir -p "$task_dir/$target_dir"
                fi

                # Apply the patch by copying the source file to the target location
                echo "Copying $dir/$source_file to $task_dir/$target_file"
                cp "$dir/$source_file" "$task_dir/$target_file"
              done <<< "$patch_pairs"
            fi

            # Repo-level setup
            echo "Setting up the repo environment for $dir"
            cd "$task_dir"
            execute_if_exists "setup_repo_env.sh"
            cd -

            # Bounty-level setup
            echo "Setting up the bounty environment for $dir"
            cd "$dir/setup_files"
            execute_if_exists "setup_bounty_env.sh"
            cd -

            check_server_ready

            # Conditional check for invariant thresholds
            if [ -f "$task_dir/metadata.json" ] && \
               jq -e '.invariant_thresholds | type == "object"' "$task_dir/metadata.json" > /dev/null; then

              # Repo-level patch invariant checks
              echo "Running repo-level patch invariant checks for $task_dir"
              cd "$task_dir"
              if [ -f "run_repo_invariants.sh" ]; then
                chmod +x run_repo_invariants.sh
                bash run_repo_invariants.sh
                if [ ! -f "invariant_scores.json" ]; then
                  echo "Repo-level invariant_scores.json is not generated for $task_dir"
                  exit 1
                fi
              else
                echo "No run_repo_invariants.sh file found in $task_dir"
                exit 1
              fi
              cd -

              # Bounty-level patch invariant checks
              echo "Running bounty-level patch invariant checks for $dir"
              cd "$dir"
              if [ -f "run_bounty_invariants.sh" ]; then
                chmod +x run_bounty_invariants.sh
                bash run_bounty_invariants.sh
                if [ ! -f "invariant_scores.json" ]; then
                  echo "Bounty-level invariant_scores.json is not generated for $dir"
                  echo "As this is optional, create a template invariant_scores.json"
                  echo '{"invariant_scores": {}}' > invariant_scores.json
                fi
              else
                echo "No run_bounty_invariants.sh file found in $dir"
                exit 1
              fi
              cd -

              # Run the check_invariants test for this task
              python tests/check_invariants.py "$task_dir/metadata.json" "$task_dir/invariant_scores.json" "$dir/bounty_metadata.json" "$dir/invariant_scores.json"
              if [ $? -ne 0 ]; then
                echo "Check invariants failed for $dir"
                exit 1
              fi

              # Cleanup after successful checks
              rm "$dir/invariant_scores.json"
              rm "$task_dir/invariant_scores.json"

            else
              echo "Skipping patch invariant checks - no valid invariant_thresholds defined"
            fi

            # Run the patch test for this task
            echo "Running patch test for $dir"
            pytest --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no tests/test_patch.py::test_patch_workflow --dirs "$dir"

            # Stop Docker for this task
            echo "Stopping Docker for $dir"
            cd "$dir/setup_files"
            if [ -f docker-compose.yml ]; then
              docker compose down -v
            fi
            cd -

            # Stop Docker for this repo
            echo "Stopping Docker for $task_dir"
            cd "$task_dir"
            if [ -f docker-compose.yml ]; then
              docker compose down -v
            fi
            cd -

            checkout_main "$dir"

            echo "Completed processing bug bounty: $dir"
            echo "-----------------------------------"
          done
          echo "All tasks processed."

      - name: Display disk space after tests
        if: needs.setup.outputs.should_exit != 'true'
        run: df -h

      - name: Docker Cleanup after tests
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker system prune -af

      - name: Display disk space after cleanup
        if: needs.setup.outputs.should_exit != 'true'
        run: df -h

  compatible_patches:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - run: echo "Get modified dirs ${{ needs.setup.outputs.modified_dirs }}" 

      - name: Docker Cleanup before pulling new image
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker system prune -af
          docker image prune -af

      - name: Pull Docker Container
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          docker pull --quiet cybench/kali-linux-ci:latest
          docker manifest inspect cybench/kali-linux-ci:latest
          docker image tag cybench/kali-linux-ci:latest cybench

      - name: Create Docker Network
        if: needs.setup.outputs.should_exit != 'true'
        run: docker network create shared_net || true
      
      - name: Verify Compatible Patches
        if: needs.setup.outputs.should_exit != 'true'
        run: |
          source /tmp/shared_functions.sh
          echo "${{ needs.setup.outputs.modified_dirs }}" | while read -r dir; do
            echo "Checking to see whether compatible patches were added to $dir/bounty_metadata.json"
            if jq -e 'has("compatible_patches")' "$dir/bounty_metadata.json" > /dev/null; then
              echo "compatible_patches exists in $dir/bounty_metadata.json"
            else
              echo "compatible_patches does not exist in $dir/bounty_metadata.json"
              exit 1
            fi

            check_server_ready

            echo "Running identify_compatible_patches.py in verify mode to validate compatible patches"
            python identify_compatible_patches.py --task_dir "$dir" --is_ci

            if ! git diff --exit-code "$dir/bounty_metadata.json"; then
              echo "::error file=$dir/bounty_metadata.json::compatible_patches field is not up-to-date. Please run identify_compatible_patches.py and commit the result."
              exit 1
            else
              echo "Compatible patch information in bounty_metadata.json is correct."
            fi
          done

      - name: Docker Cleanup after tests
        if: needs.setup.outputs.should_exitt != 'true'
        run: |
          docker system prune -af

      - name: Display disk space after cleanup
        if: needs.setup.outputs.should_exit != 'true'
        run: df -h