name: Check pytest tests
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Disable Git ownership check
        run: git config --global --add safe.directory '*'
        
      - name: Fetch main branch
        run: git fetch origin main:refs/remotes/origin/main

      - name: Clean up before starting
        run: |
          sudo apt-get clean
          npm cache clean --force

      - name: Setup Python environment
        uses: actions/setup-python@v5

      - name: Create .env file
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip -q
          pip install -r .github/requirements.txt -q

      - name: Docker Cleanup before pulling new image
        run: |
          docker system prune -af
          docker image prune -af

      - name: Pull Docker Container
        run: |
          docker pull --quiet cybench/kali-linux-ci:latest
          docker manifest inspect cybench/kali-linux-ci:latest
          docker image tag cybench/kali-linux-ci:latest cybench

      - name: Display disk space after pulling image
        run: df -H

      - name: Create Docker Network
        run: docker network create shared_net || true

      - name: Find modified metadata/bounty directories
        id: modified-dirs
        run: |
          cat << 'EOF' > /tmp/shared_functions.sh
          execute_if_exists() {
            local script_path="$1"
            if [ -f "$script_path" ]; then
              echo "Executing $script_path"
              bash "$script_path"
            else
              echo "$script_path not found, skipping."
            fi
          }

          get_modified_dirs() {
            git diff --diff-filter=ACM --name-only origin/main...HEAD | awk -F/ '{print $1}' | sort -u | xargs -I{} find {} -type d -regex ".*/bounty_[0-9]*$" | sort -u
          }

          checkout_vulnerable_commit() {
            local dir="$1"
            if [[ -f "$dir/bounty_metadata.json" ]]; then
              vulnerable_commit=$(jq -r '.["vulnerable_commit"]' "$dir/bounty_metadata.json")
              
              if [[ -n "$vulnerable_commit" ]]; then
                echo "Found vulnerable commit: $vulnerable_commit in $dir"

                git submodule update --init "$task_dir"
                echo "Cleaning repository to remove all changes and untracked files..."
                checkout_main "$dir"

                task_dir=$(dirname "$(dirname "$dir")")
                cd "$task_dir/codebase" || exit 1

                # Update the submodule and checkout the vulnerable commit
                git checkout "$vulnerable_commit"

                cd - || exit 1
              else
                echo "No vulnerable commit found in $dir/bounty_metadata.json"
                exit 1
              fi
            else
              echo "No bounty_metadata.json file found in $dir"
              exit 1
            fi
          }

          checkout_main() {
            local dir="$1"
            task_dir=$(dirname "$(dirname "$dir")")
            echo "Checking out main branch at $task_dir/codebase"
            cd "$task_dir/codebase" || exit 1
            echo "Cleaning up the codebase"
            git reset --hard HEAD
            git clean -fdx

            echo "Checking if 'main' branch exists"
            if git rev-parse --verify main >/dev/null 2>&1; then
              echo "'main' branch exists"
            else
              echo "'main' branch does NOT exist."
              if git rev-parse --verify master >/dev/null 2>&1; then
                echo "'master' branch exists - renaming 'master' to 'main'"
                git branch -m master main
              else
                echo "Neither 'main' nor 'master' branch exists. Exiting."
                exit 1
              fi
            fi

            # Checkout 'main' branch
            echo "Checking out 'main' branch at $task_dir/codebase"
            git checkout main --force
            cd - || exit 1
          }

          EOF
          chmod +x /tmp/shared_functions.sh
          source /tmp/shared_functions.sh
          modified_dirs=$(get_modified_dirs)
          if [ -z "$modified_dirs" ]; then
            echo "No modified directories found. Exiting."
            exit 1
          else
            echo "Modified directories: $modified_dirs"
            echo "modified_dirs<<EOF" >> $GITHUB_OUTPUT
            echo "$modified_dirs" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Run Exploit Tests
        if: steps.modified-dirs.outputs.modified_dirs != ''
        run: |
          source /tmp/shared_functions.sh
          echo "${{ steps.modified-dirs.outputs.modified_dirs }}" | while read -r dir; do
            task_dir=$(dirname "$(dirname "$dir")")
            echo "Processing bug bounty: $dir"

            checkout_vulnerable_commit "$dir"

            # Repo-level setup
            echo "Setting up the repo environment for $dir"
            cd "$task_dir"
            execute_if_exists "setup_repo_env.sh"
            cd -

            # Bounty-level setup
            echo "Setting up the bounty environment for $dir"
            cd "$dir/setup_files"
            execute_if_exists "setup_bounty_env.sh"
            cd -

            # Run the exploit and verification for this task
            echo "Running exploit and verification test for $dir"
            pytest --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no tests/test_exploit.py::test_exploit_workflow --dirs "$dir"

            # Stop Docker for this task
            echo "Stopping Docker for $dir"
            cd "$dir/setup_files"
            execute_if_exists "stop_docker.sh"
            cd -

            # Stop Docker for this repo
            echo "Stopping Docker for $task_dir"
            cd "$task_dir"
            execute_if_exists "stop_docker.sh"
            cd -

            checkout_main "$dir"

            echo "Completed processing bug bounty: $dir"
            echo "-----------------------------------"
          done
          echo "All tasks processed."

      - name: Docker Cleanup before pulling new image
        run: |
          docker system prune -af
          docker image prune -af

      - name: Pull Docker Container
        run: |
          docker pull --quiet cybench/kali-linux-ci:latest
          docker manifest inspect cybench/kali-linux-ci:latest
          docker image tag cybench/kali-linux-ci:latest cybench
      
      - name: Create Docker Network
        run: docker network create shared_net || true

      - name: Run Patch Tests
        if: steps.modified-dirs.outputs.modified_dirs != ''
        run: |
          source /tmp/shared_functions.sh
          echo "${{ steps.modified-dirs.outputs.modified_dirs }}" | while read -r dir; do
            task_dir=$(dirname "$(dirname "$dir")")
            echo "Processing bug bounty: $dir"

            checkout_vulnerable_commit "$dir"

            # Patch the bug for this task
            bounty_metadata="$dir/bounty_metadata.json"

            patch_pairs=$(jq -r '.patch | to_entries[] | "\(.key) \(.value)"' "$bounty_metadata")

            if [ -z "$patch_pairs" ]; then
              echo "No patches defined for $dir. Skipping patch application."
              checkout_main "$dir"
              continue
            else
              # Apply the patches by copying local files to their target locations
              declare -A original_files
              echo "Applying patches for $dir"
              while read -r source_file target_file; do
                # Ensure the target directory exists
                target_dir=$(dirname "$target_file")
                if [ ! -d "$task_dir/$target_dir" ]; then
                  echo "Creating directory $task_dir/$target_dir"
                  mkdir -p "$task_dir/$target_dir"
                fi

                # Apply the patch by copying the source file to the target location
                echo "Copying $dir/$source_file to $task_dir/$target_file"
                cp "$dir/$source_file" "$task_dir/$target_file"
              done <<< "$patch_pairs"
            fi

             # Repo-level setup
            echo "Setting up the repo environment for $dir"
            cd "$task_dir"
            execute_if_exists "setup_repo_env.sh"
            cd -

            # Bounty-level setup
            echo "Setting up the bounty environment for $dir"
            cd "$dir/setup_files"
            execute_if_exists "setup_bounty_env.sh"
            cd -

            # Run the patch test for this task
            echo "Running patch test for $dir"
            pytest --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no tests/test_patch.py::test_patch_workflow --dirs "$dir"

            # Stop Docker for this task
            echo "Stopping Docker for $dir"
            cd "$dir/setup_files"
            execute_if_exists "stop_docker.sh"
            cd -

            # Stop Docker for this repo
            echo "Stopping Docker for $task_dir"
            cd "$task_dir"
            execute_if_exists "stop_docker.sh"
            cd -

            checkout_main "$dir"

            echo "Completed processing bug bounty: $dir"
            echo "-----------------------------------"
          done
          echo "All tasks processed."


      - name: Test bounty metadata.json
        run: |
          modified_files=$(git diff --diff-filter=ACM --name-only origin/main...HEAD | grep '.*/bounties/.*/bounty_metadata.json$' || true)
          if [ -z "$modified_files" ]; then
            echo "No relevant files in bounty metadata were modified."
            exit 0  # Exit successfully if no files are modified
          fi
          echo "Modified bounty_metadata.json files: $modified_files"
          modified_dirs=$(echo "$modified_files" | tr "\n" "\0" | xargs -0 -n1 dirname | sort -u)
          echo "$modified_dirs" | tr '\n' '\0' | xargs -0 pytest --log-cli-level=INFO --log-cli-format='%(message)s' --tb=no tests/test_metadata_json.py::test_bounty_metadata --dirs
          echo "Directories to be tested: $modified_dirs"

      - name: Display disk space after tests
        run: df -h

      - name: Docker Cleanup after tests
        run: |
          docker system prune -af

      - name: Display disk space after cleanup
        run: df -h