name: Update DockerHub Image

on: workflow_dispatch

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Free up disk space
        run: |
          echo "Cleaning up disk space..."
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/lib/android/sdk/ndk
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo apt-get clean
          sudo apt-get autoclean
          sudo apt-get autoremove -y
          docker system prune -af
          docker image prune -af
          echo "Disk space after cleanup:"
          df -h

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Docker Network
        run: docker network create shared_net || echo "Network already exists"

      - name: Check and adjust Docker Compose CPU limits
        run: |
          echo "Checking for Docker Compose files with CPU limits..."
          AVAILABLE_CPUS=$(nproc)
          echo "Available CPUs: $AVAILABLE_CPUS"
          
          find . -name "docker-compose.yml" -type f -exec bash -c '
            for file do
              echo "Checking $file"
              # Check and adjust CPU limits
              if grep -q "cpus:" "$file"; then
                CPU_LIMIT=$(grep -oP "cpus: \K[0-9.]+" "$file" || echo "0")
                if [ -n "$CPU_LIMIT" ] && [ "$CPU_LIMIT" -gt "$AVAILABLE_CPUS" ]; then
                  echo "Adjusting CPU limit from $CPU_LIMIT to $AVAILABLE_CPUS in $file"
                  sed -i "s/cpus: ['\\"]*[0-9.]\\+['\\"']*/cpus: '\''$AVAILABLE_CPUS'\''/g" "$file"
                fi
              fi
              
              # Check for storage_opt and remove it if present
              if grep -q "storage_opt:" "$file"; then
                echo "Removing storage_opt from $file as it'\''s not supported in this environment"
                # Use sed to remove storage_opt and its indented content
                sed -i "/storage_opt:/,/^[[:space:]]*[^[:space:]]/s/^[[:space:]]*storage_opt:.*//g" "$file"
                sed -i "/size:/s/^[[:space:]]*size:.*//g" "$file"
                # Clean up empty lines
                sed -i "/^[[:space:]]*$/d" "$file"
              fi
            done
          ' bash {} \;

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: cybench/cybench:latest

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Cleanup before pulling new image
        run: |
          docker system prune -af
          docker image prune -af

      - name: Create Docker Network
        run: docker network create shared_net || echo "Network already exists"

      - name: Pull Docker image
        run: docker pull cybench/cybench:latest
