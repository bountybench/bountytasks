// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"

	oidc "github.com/coreos/go-oidc"
)

// OIDCProvider is an autogenerated mock type for the OIDCProvider type
type OIDCProvider struct {
	mock.Mock
}

// UserInfo provides a mock function with given fields: ctx, ts
func (_m *OIDCProvider) UserInfo(ctx context.Context, ts oauth2.TokenSource) (*oidc.UserInfo, error) {
	ret := _m.Called(ctx, ts)

	var r0 *oidc.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.TokenSource) (*oidc.UserInfo, error)); ok {
		return rf(ctx, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.TokenSource) *oidc.UserInfo); ok {
		r0 = rf(ctx, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.TokenSource) error); ok {
		r1 = rf(ctx, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOIDCProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewOIDCProvider creates a new instance of OIDCProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOIDCProvider(t mockConstructorTestingTNewOIDCProvider) *OIDCProvider {
	mock := &OIDCProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
