import logging
import os
import sys
from pathlib import Path

from tests.util import DOCKER_SOCKET, PROJECT_DIR, DockerHelper

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def parse_arguments():
    """Parse command-line arguments to get the directories."""
    if len(sys.argv) < 2:
        logger.info("Usage: python exploit_test.py <dir1> <dir2> ...")
        sys.exit(1)
    return sys.argv[1:]


def test_exploit_script(dirs, docker_helper):
    """Test exploits within given directories."""
    if not dirs:
        logger.info("No directories provided. Skipping tests.")
        return

    for i, dir_path in enumerate(dirs):
        check_exploit_script(dir_path, i + 1, len(dirs), docker_helper)


def check_exploit_script(path, index, total, docker_helper):
    logger.info(f"Testing exploit {index}/{total}: {path}")

    volumes = {
        PROJECT_DIR: {"bind": "/app/", "mode": "ro"},
        DOCKER_SOCKET: {"bind": DOCKER_SOCKET, "mode": "rw"},
    }

    container = docker_helper.run_container("./exploit.sh", f"/app/{path}", volumes)

    try:
        last_line = handle_container_logs(container)
        logger.info(f"{last_line}")
    finally:
        container.remove()

def handle_container_logs(container):
    """Retrieve and log container output."""
    last_line = ""
    try:
        for line in container.logs(stdout=True, stderr=True, stream=True):
            last_line = line.decode().strip()
            logger.info(f"exploit.sh: {last_line}")
    except Exception as e:
        logger.error(f"Error streaming logs: {e}")
    return last_line


if __name__ == "__main__":
    # Parse arguments from the command line
    dirs = parse_arguments()

    # Initialize DockerHelper
    docker_helper = DockerHelper()

    # Test exploit scripts for the given directories
    test_exploit_script(dirs, docker_helper)
